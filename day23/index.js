const sample = `#.#..#...#..##.#..##.##.###.#..#...#.############.###.####.....##.#.......
...#..#..##......#.......###.#..##.#.#.#...#..#.#.#.#...###.#..#...#.....#
##..###..##.####....##.#...#....##.....#.##..#####..##..###.#.#.#.##......
.#.#.##.#..##....#..#...#.#.##.#...##.##.##....#...####..#.###..#.#..##.#.
##..##.##..#.#####..#..#####..##.###.##.#..#.#....#.#.##.###..#####.#...##
.#..#.#.##.....##.#.####...##.#.......##.#.#.######.#....#####.#####..#..#
##....#...##.#.....##..#.#...######.#..#.##.###..###.#.##.##.#..#....#..##
.#.###..###.##.#...#.#.##.#.#...#####.##.#.##.######..######.##...###.##..
#.#..##....#....#..####.#..###.#...#.#.########.#....#..#...#.#..#..####..
....#.#.##..#.#######...##...##.#..#.#.###.###...##...##.#...##...#.#####.
....#.####..#......#..#....#..###...#.#....#.##...#.#....#####..#..#.#...#
#......#..#######..#...####...#.#.##.#..###.....#.#.####.#.#.#.##.##.##.##
.###.....##..###..####.##..###....#..#...###..##..##..#.####.##.#......###
###...#.........#.#.....####....##.###.####.###.#....##.#..#.#..##...#..##
..#.#.#####.#..#.#.######.#####....#.#...#..#.##..#..#.#..##..#..##.###...
##.#####.##.#...#.#.#...#...#..........#.#.#..####.#...##.######..###...##
..#.#.####..##..#.#..#####.#.##..#..#.##....###.##.##..#.#...##.##..##.##.
###..#.######.##...##.##.####....#.##.#.#.#...#..#....##..####..##.#.#.##.
.##.##.###.....####..###....#.#..##..#.#..#..##..#.##.##...##..#.#.#..###.
....#.####...######.....########.#.#....##.#..###..#.###..###.#..#.#....##
.#..###.#.#.#.#.#..#...####.#.#.##....#..#...#....##.....####...####.#.###
#.##...###.#####.##.###.#....##..#.....##..#...#..##.#...#..##...##.#.##.#
...#..####..##....###......######.#.#.#..#######...##.#..####.....#.#.####
...#.####....###.##.#.#.#..##..#...#.##.#...#.###..#..#....###.##.....#..#
#..#.#.##...#......##.##..#..####..##..###.###.#.###.##....#....###.##..#.
.#..#..####.#.#.###.###.####.#....#.####....#.##.##....#......#.####.##..#
...####.#...#.#....#.#......#.#.#..##.##.##....##...##......##.####.##....
.....#..#.##.##..#..##...###..#..#.#...####.#.##...##.#####.#..#..#..#####
..##.#...###....#...##.#.#.......#....####..##........#...#..###..#..###..
####...###...#....####.##...##.####..##.##...#####.####..###..##.##.#.###.
...........###....#....#...#..##..###...#..#.#..#.#.#....####.#.#..####...
.#.##.###.#.##..##..######.####....#.####...#..#...#..##..######.#.##.####
.###..#.#..##..##...#...#...####.....##..#..##.#..##....#...#..##.#..#.#..
.#.###.#...##..#..#..###...#.##.#.#.....#.#.#...#...##.#.##.#...##....#..#
.##.##..#.#.#..#.#######.###..###.#.#####..#.###.####..###...#.#.##....#..
.....###.####.#####.###....##.##.##.##...###.#.#.#...####...###....#...###
##.....#..#....#.###..##...##.#.#..###.#.#..###.#####.##.##.##.#...###.##.
.#..#.#####....#.#.#.#..#.####...#...#..###..##.######..#.#..####..##.##..
.#....#..#....#.##.#.#.##..#.#..###..##..##..###..#.#######..####..###.#..
#.#.##.##.#.##.##..#...#..###..###.#.....#.###.#..####.#..#####...###.#.#.
...#.#.##..#.#...#.#..#..####.#...###....#.....#.....#.##.####.#...####.##
##.###.##..#..##.###.#..#..#.###.###.##.##...#.#..####....##.#####...#.#.#
###.....#.#.##.#...#.#...##.##.#..####.##...#.#.#####....#..#####...#.#.#.
##.######.#.#....#....#.#####.....####....###.#.#...##.#..#.##.#.##..##.#.
##...##.##.#..#.#......#.####..###..###..#....###..#..#########..#.###.#..
#.#..###..#...#.#.#####.#.##..#..#.#.#.#..#.##.####.####..#.#..##.##.####.
###########.#..###..#.##.###.#.#.#.#..##.##...#...###..##..###.##...##.#.#
..#.##..###....#.#..#.......#.##..##.######..#####.##.##........##....#...
.#..#.##.#..#......##.#..##.#.##.###..###.#....##..###.#.#.#...#.##.#...##
#####..##..##.#..###...##.#...#.##.#..#....##..#..#...#.#...##.###...#.#.#
#.#.#.....###.#.#.##.......#....#.####.########..#.##.##...#.#.#....##....
.###.#...###..#####..##..#.#.##.####.###.#....##.#..##..#...#.....#####.#.
#####.#..#.###...##.#..##.##...####...####..###...###......#..#.#.......##
###....#.##.#.#.#.####.##.###...##.#.#...#..#.....#.##########...########.
###...###.#..#....#.#.#...#...#...#.#####...##..#.....##..##...#.#.#.##.#.
##.##.#..###....#..#.#.#####...##....#....#...###....#..#..#.#.#...##..###
...#..##..###..#.####..#.#.#....##.##.#.#...#....###...#.##......##.#.###.
.#.######.#######..#..#.#..##..#..#.##.#...####..##########..#.##..#.#.###
.#.#...#..##.#...#..##.#..##......#.###.###.#.##.###...#....#...########.#
.##.#....#..#.#.##..#.#####...##.#.##.##..#.#.##.##.#.#...#.#...#....##.##
..##.###.###...#...##...#.##..###.....##.#.####.###.......#....##.##.##...
.####.#.###.##.#...###.#######..#.....###..#..##.#..##......#..##.##..###.
##..#.#####.##...##..###.######..#.#.##...##.#.#.##.#..#....###.##..#..###
.###....###...#...#...#.#..###.#.##..###.#...##..#..#...##...##....#.####.
.##.#.#.##..#.#.#..#..####...###.##..##.##..###..#####..###...#.#.########
.##..##..##....#....#.#.#.##.#....#....#..###.####.##..##...#.##..##.....#
..#.###..#.##..#..#.##.######.#.###.#..##.....#####.#########..##...#..#.#
#.####...#..#..#.###..##.#.#...#....##.#####.#..#...##..##.#..#..###....#.
##...#....#######.###.###..#.##....####.#.#...#.#.#...####..#.#..#.###.#..
##.#.####..###.###.###...#..#.#..#..#....##..#..###.#...#.#.#..#.##.##.##.
##....#..#..#.#.##.##.#...#...#####....##..#..####.#.#..#...###.###..###..
#.#.#.##......#..#..##...#.....##.##..####..###....#.#..#...####..#.##....
.#.###.#..#.#..#..###.....##.#.#.##....##...##.#.#.##.#.#..##..##..#......
###...##.###..#.##.#.#..#.##..##.#...##..###.#........#.#.#...#.#.#.#.....`;

const lines = sample.split("\n");
const directions = {
  N: [-1, 0],
  E: [0, 1],
  S: [1, 0],
  W: [0, -1],
};

class Game {
  constructor(lines) {
    this.elves = new Set();
    for (let i = 0; i < lines.length; i++) {
      for (let j = 0; j < lines[i].length; j++) {
        if (lines[i][j] === "#") {
          this.elves.add(`${i},${j}`);
        }
      }
    }
  }

  getElves() {
    return Array.from(this.elves, (hash) => [
      hash.split(",").map(Number),
      hash,
    ]);
  }

  isFree([i, j]) {
    return !this.elves.has(`${i},${j}`);
  }

  getBounds() {
    let minI = null,
      maxI = null,
      minJ = null,
      maxJ = null;
    for (const hash of this.elves) {
      const [i, j] = hash.split(",").map(Number);
      if (minI === null || i < minI) minI = i;
      if (maxI === null || i > maxI) maxI = i;
      if (minJ === null || j < minJ) minJ = j;
      if (maxJ === null || j > maxJ) maxJ = j;
    }
    return [minI, maxI, minJ, maxJ];
  }

  stringify() {
    const [minI, maxI, minJ, maxJ] = this.getBounds();
    const lines = [];
    for (let i = minI; i <= maxI; i++) {
      const line = [];
      for (let j = minJ; j <= maxJ; j++) {
        if (this.elves.has(`${i},${j}`)) {
          line.push("#");
        } else {
          line.push(".");
        }
      }
      lines.push(line.join(""));
    }
    return lines.join("\n");
  }

  count() {
    const [minI, maxI, minJ, maxJ] = this.getBounds();
    let ctx = 0;
    for (let i = minI; i <= maxI; i++) {
      for (let j = minJ; j <= maxJ; j++) {
        if (this.isFree([i, j])) {
          ctx++;
        }
      }
    }
    return ctx;
  }

  static move([i, j], dir) {
    for (const letter of dir) {
      const [di, dj] = directions[letter];
      i += di;
      j += dj;
    }
    return [i, j];
  }
}

const game = new Game(lines);

const order = [
  ["N", "NE", "NW"],
  ["S", "SE", "SW"],
  ["W", "NW", "SW"],
  ["E", "SE", "NE"],
];

function iteration() {
  const selected = new Map();
  const blacklist = new Set();
  // stage 1: select squares
  for (const [elf, hash] of game.getElves()) {
    // check if all are empty
    // if so, do nothing
    if (
      order.every((dirs) =>
        dirs.every((dir) => game.isFree(Game.move(elf, dir)))
      )
    ) {
      continue;
    }
    // check each direction in order
    for (const dirs of order) {
      if (dirs.every((dir) => game.isFree(Game.move(elf, dir)))) {
        const [i, j] = Game.move(elf, dirs[0]);
        const next_hash = `${i},${j}`;
        if (selected.has(next_hash)) {
          selected.delete(next_hash);
          blacklist.add(next_hash);
        } else if (!blacklist.has(next_hash)) {
          selected.set(next_hash, hash);
        }
        break;
      }
    }
  }
  // stage 2: move elves
  for (const [next_hash, hash] of selected.entries()) {
    game.elves.add(next_hash);
    game.elves.delete(hash);
  }
  // stage 3: change order for next time
  order.push(order.shift());
  console.log(selected.size);
  return selected.size === 0;
}

for (let i = 0; i < 1e6; i++) {
  const isFinished = iteration();
  if (isFinished) {
    console.log(i + 1);
    break;
  }
}

console.log(game.count());
